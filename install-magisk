#!/bin/bash
set -euxo pipefail

# Settings for adb and curl.
export ANDROID_SERIAL="172.16.23.223:5555" # see adb help
readonly CURL_ARGS=(-L) # follow location

# Root shell loader and temporary script path for run_as_root.
readonly LOADER_PATH="/data/local/tmp/loader"
readonly LOADER_BUILD_DIR="$(dirname "$(readlink -f "$0")")" # script directory
readonly SCRIPT_TMP_PATH="/data/local/tmp/magiskinstall-tmp"

# Magisk Manager package name, version and URL
readonly MAGISK_MANAGER_PACKAGE_NAME="com.topjohnwu.magisk"
readonly MAGISK_MANAGER_MAIN_PACKAGE="${MAGISK_MANAGER_PACKAGE_NAME}/a.c"
readonly MAGISK_MANAGER_VERSION="7.5.1"
readonly MAGISK_MANAGER_APK_URL="https://github.com/topjohnwu/Magisk/releases/download/manager-v${MAGISK_MANAGER_VERSION}/MagiskManager-v${MAGISK_MANAGER_VERSION}.apk"

# boot, recovery and recoveryB partitions. boot is backed up to recoveryB before patching, whose
# content should match recovery.
readonly BOOT_PARTNO="5"
readonly BOOT_DEV="/dev/mmcblk0p${BOOT_PARTNO}"
readonly RECOVERY_PARTNO="4"
readonly RECOVERY_DEV="/dev/mmcblk0p${RECOVERY_PARTNO}"
readonly RECOVERY_B_PARTNO="8"
readonly RECOVERY_B_DEV="/dev/mmcblk0p${RECOVERY_B_PARTNO}"

# Directory to place boot image in for patching from Magisk Manager.
readonly DOWNLOAD_DIR="/sdcard/Download" # Something accessible from the Android UI
readonly PATCH_DIR="${DOWNLOAD_DIR}/magiskinstall.$(date +%F_%T)"

# Directory where Magisk Manager places the patched output boot image.
readonly MAGISK_PATCHED_PATH="${DOWNLOAD_DIR}/magisk_patched.img"

# Runs the passed arguments as root.
run_as_root() {
    # Getting something escaped properly through adb shell, the loader's argv parsing, and then
    # the android shell is tricky, so generate a shell script and execute it on the device.
    local tmp="$(mktemp)"
    printf '#!/system/bin/sh\nPS4="(run_as_root) + "\nset -x\n' > "$tmp"
    printf '%q ' "$@" >> "$tmp" # Need to print "%q " individually; the entire format is repeated per arg
    printf '\n' >> "$tmp"
    chmod +x "$tmp"
    adb push "$tmp" "$SCRIPT_TMP_PATH" > /dev/null
    rm -f "$tmp"
    adb shell "$LOADER_PATH -trigger_exec $SCRIPT_TMP_PATH"
}

# Tests whether run_as_root escapes arguments and returns the return code properly.
test_run_as_root() {
    local have="$(run_as_root sh -c 'echo $1' "foo bar" "bar baz" "baz qux")"
    local want="bar baz"
    if [ "$have" != "$want" ]; then
        echo "ERROR: run_as_root broken: got >>>$have<<<, want >>>$want<<<" >&2
        exit 99
    fi

    if run_as_root false; then
        echo "ERROR: 'run_as_root false' succeeded" >&2
        exit 99
    fi
}

# Installs the root shell loader on the device.
prepare_root() {
    if ! adb shell test -x "$LOADER_PATH"; then
        echo "A root shell loader is not installed. Building and installing."
        make -C "$LOADER_BUILD_DIR" loader
        adb push "$LOADER_BUILD_DIR"/loader "$LOADER_PATH"
    fi
    test_run_as_root
}

# Returns the name of the given partition number from the deviceâ€™s /proc/partinfo.
get_partname() {
    local partno="$1"
    # ex.: part05: 00012800 0000a000 "boot"
    set -x
    run_as_root cat /proc/partinfo | \
        awk '/^part0*'"$partno"':/ { gsub("\"", ""); print $NF }'
}

# Queries the user for a response and returns 0 for yes, 1 for no.
ask_yesno() {
    local prompt="$1"
    local reply
    while true; do
        printf "%s [y/n]: " "$prompt"
        read reply
        case "$reply" in
            [yY])
                return 0
                ;;
            [nN])
                return 1
                ;;
            *)
                echo "Invalid response. Please enter 'y' or 'n'."
                ;;
        esac
    done
}

# Returns the versionName of an installed package.
get_package_version() {
    local pkg="$1"
    adb shell pm dump "$pkg" | \
        sed -r -n -e 's/^[[:blank:]]*versionName=([^[:blank:]]+)/\1/;T;p'
}

# Checks whether a given partition is an Android boot image.
is_android_bootimg() {
    local part="$1"
    test "$(run_as_root dd if="$part" bs=8 count=1)" = 'ANDROID!'
}

# (Re-)installs Magisk Manager.
install_magisk_manager(){
    local tmp="$(mktemp)"
    curl "${CURL_ARGS[@]}" "$MAGISK_MANAGER_APK_URL" > "$tmp"
    if ! adb install -r "$tmp"; then
        if ! ask_yesno "Installation of Magisk Manager failed. Continue?"; then
            exit 1
        fi
    fi
    rm -f "$tmp"
}


### Main script starts here ###

echo "Preparing root environment..."
prepare_root

echo "Checking Magisk Manager version..."
mm_version="$(get_package_version "$MAGISK_MANAGER_PACKAGE_NAME")"
if [ -z "$mm_version" ]; then
    echo "Magisk Manager does not seem to be installed. Installing..."
    install_magisk_manager
elif [ "$mm_version" != "$MAGISK_MANAGER_VERSION" ]; then
    echo "Your Magisk Manager version '$mm_version' does not match expected '$MAGISK_MANAGER_VERSION'."
    if ask_yesno "Reinstall?"; then
        install_magisk_manager
    fi
else
    echo "Installed Magisk Manager version $mm_version matches expected version."
fi

echo "Sanity-checking partitions..."
declare -rA want_partnames=(["$BOOT_PARTNO"]="boot"
                            ["$RECOVERY_PARTNO"]="recovery"
                            ["$RECOVERY_B_PARTNO"]="recoveryB")
for partno in "${!want_partnames[@]}"; do
    want_name="${want_partnames[$partno]}"
    have_name="$(get_partname "$partno")"
    if [ "$have_name" != "$want_name" ]; then
        echo "Partition $partno is named '$have_name', expected '$want_name'. Aborting." >&2
        exit 1
    fi
    echo "Partition $partno has expected name '$want_name'."
done

for dev in "$BOOT_DEV" "$RECOVERY_DEV" "$RECOVERY_B_DEV"; do
    if ! is_android_bootimg "$dev"; then
        echo "Device $dev does not appear to be an Android boot image. Aborting." >&2
        exit 1
    fi
    echo "Device $dev looks like an Android boot image."
done

echo "Creating patch directory $PATCH_DIR..."
adb shell mkdir "$PATCH_DIR"

orig_img="$PATCH_DIR/boot_orig.img"
run_as_root dd if="$BOOT_DEV" of="$orig_img"
run_as_root sh -c 'getprop > "$1"/getprop.txt' argv0 "$PATCH_DIR"

echo "Starting Magisk Manager..."
adb shell am start "$MAGISK_MANAGER_MAIN_PACKAGE"

cat <<EOF

Magisk Manager has been started. To patch the boot image, do the following:

* Click on 'Install' in the 'Magisk is not installed' line. You will need to click 'Install'
  with a mouse; just selecting and 'clicking' the line with the TV remote WILL NOT WORK.

* Select 'Install', then 'Select and Patch a File'.

* Select $orig_img

* Wait until Magisk has finished patching.

* Press [Enter] here. You can close Magisk Manager on the TV.
EOF
read

if ! adb shell test -e "$MAGISK_PATCHED_PATH"; then
    echo "Patched image not found at '$MAGISK_PATCHED_PATH'. Aborting." >&2
    exit 1
elif ! adb shell test "$MAGISK_PATCHED_PATH" -nt "$orig_img"; then
    echo "Patched image ($MAGISK_PATCHED_PATH) is not newer than $orig_img. Aborting." >&2
    exit 1
fi

if adb shell cmp "$MAGISK_PATCHED_PATH" "$orig_img"; then
    echo "Patched image $MAGISK_PATCHED_PATH equal to original image $orig_img. Aborting." >&2
    exit 1
fi

if ! is_android_bootimg "$MAGISK_PATCHED_PATH"; then
    echo "Patched image $MAGISK_PATCHED_PATH does not look like an Android boot image. Aborting." >&2
    exit 1
fi


patched_img="$PATCH_DIR/boot_patched.img"
echo "Patched image $MAGISK_PATCHED_PATH looks sane, moving to $patched_img"
adb shell mv "$MAGISK_PATCHED_PATH" "$patched_img"

if run_as_root cmp "$RECOVERY_DEV" "$RECOVERY_B_DEV" || \
    ask_yesno "Partitions 'recovery' and 'recoveryB' differ (after ~20MB seems normal). Do you still want to back up 'boot' to 'recoveryB'?"; then
    run_as_root dd if="$BOOT_DEV" of="$RECOVERY_B_DEV"
    echo "Backed up $BOOT_DEV (boot) to $RECOVERY_B_DEV (recoveryB). See README.md for recovery hints."
else
    if ! ask_yesno "Not backing up boot partition. Are you sure?"; then
        exit 1
    fi
fi

if ! ask_yesno "Do you want to write $patched_img to $BOOT_DEV? This is your last chance to quit."; then
    exit 1
fi

run_as_root dd if="$patched_img" of="$BOOT_DEV"

echo "Boot partition ($BOOT_DEV) has been patched. Enjoy!"
